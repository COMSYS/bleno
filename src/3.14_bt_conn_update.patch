diff --git a/include/net/bluetooth/l2cap.h b/include/net/bluetooth/l2cap.h
index dbc4a89..3a47203 100644
--- a/include/net/bluetooth/l2cap.h
+++ b/include/net/bluetooth/l2cap.h
@@ -84,6 +84,7 @@ struct l2cap_conninfo {
 	__u8  dev_class[3];
 };
 
+
 #define L2CAP_LM	0x03
 #define L2CAP_LM_MASTER		0x0001
 #define L2CAP_LM_AUTH		0x0002
@@ -92,6 +93,9 @@ struct l2cap_conninfo {
 #define L2CAP_LM_RELIABLE	0x0010
 #define L2CAP_LM_SECURE		0x0020
 
+#define L2CAP_LE_CONN_PARAM_UPDATE_REQ	0x04
+
+
 /* L2CAP command codes */
 #define L2CAP_COMMAND_REJ	0x01
 #define L2CAP_CONN_REQ		0x02
@@ -890,4 +894,6 @@ void l2cap_conn_put(struct l2cap_conn *conn);
 int l2cap_register_user(struct l2cap_conn *conn, struct l2cap_user *user);
 void l2cap_unregister_user(struct l2cap_conn *conn, struct l2cap_user *user);
 
+void l2cap_chan_le_connection_update_req(struct l2cap_chan *chan, struct l2cap_conn_param_update_req* req);
+
 #endif /* __L2CAP_H */
diff --git a/net/bluetooth/l2cap_core.c b/net/bluetooth/l2cap_core.c
index b0ad2c7..e11cf6d 100644
--- a/net/bluetooth/l2cap_core.c
+++ b/net/bluetooth/l2cap_core.c
@@ -83,6 +83,7 @@ static struct l2cap_chan *__l2cap_get_chan_by_dcid(struct l2cap_conn *conn,
 	struct l2cap_chan *c;
 
 	list_for_each_entry(c, &conn->chan_l, list) {
+        BT_DBG("got channel with cid %d", c->scid);
 		if (c->dcid == cid)
 			return c;
 	}
@@ -95,6 +96,7 @@ static struct l2cap_chan *__l2cap_get_chan_by_scid(struct l2cap_conn *conn,
 	struct l2cap_chan *c;
 
 	list_for_each_entry(c, &conn->chan_l, list) {
+        BT_DBG("got channel with cid %d", c->scid);
 		if (c->scid == cid)
 			return c;
 	}
@@ -642,6 +644,20 @@ void l2cap_chan_del(struct l2cap_chan *chan, int err)
 	return;
 }
 
+
+void l2cap_chan_le_connection_update_req(struct l2cap_chan *chan, struct l2cap_conn_param_update_req* req)
+{
+	struct l2cap_conn *conn = chan->conn;
+
+    req->min = __cpu_to_le16(req->min);
+    req->max = __cpu_to_le16(req->max);
+    req->latency = __cpu_to_le16(req->latency);
+    req->to_multiplier = __cpu_to_le16(req->to_multiplier);
+	 l2cap_send_cmd(conn, chan->ident, L2CAP_CONN_PARAM_UPDATE_REQ, sizeof(struct l2cap_conn_param_update_req),
+                   req);
+}
+
+
 static void l2cap_chan_le_connect_reject(struct l2cap_chan *chan)
 {
 	struct l2cap_conn *conn = chan->conn;
diff --git a/net/bluetooth/l2cap_sock.c b/net/bluetooth/l2cap_sock.c
index d58f76b..08939aa 100644
--- a/net/bluetooth/l2cap_sock.c
+++ b/net/bluetooth/l2cap_sock.c
@@ -625,6 +625,7 @@ static int l2cap_sock_setsockopt_old(struct socket *sock, int optname,
 	struct sock *sk = sock->sk;
 	struct l2cap_chan *chan = l2cap_pi(sk)->chan;
 	struct l2cap_options opts;
+    struct l2cap_conn_param_update_req param_req;
 	int len, err = 0;
 	u32 opt;
 
@@ -716,7 +717,32 @@ static int l2cap_sock_setsockopt_old(struct socket *sock, int optname,
 		else
 			clear_bit(FLAG_FORCE_RELIABLE, &chan->flags);
 		break;
-
+            
+    case L2CAP_LE_CONN_PARAM_UPDATE_REQ:
+            if (!enable_lecoc) {
+                err = -EPROTONOSUPPORT;
+                break;
+            }
+            
+            if (!bdaddr_type_is_le(chan->src_type)) {
+                err = -EINVAL;
+                break;
+            }
+            
+            if (sk->sk_state != BT_CONNECTED) {
+                err = -EISCONN;
+                break;
+            }
+            len = min_t(unsigned int, sizeof(param_req), optlen);
+            if (copy_from_user((char *) &param_req, optval, len)) {
+                //BT_DBG("faild copying data from userspace");
+                err = -EFAULT;
+                break;
+            }
+            //BT_DBG("Calling channel switch");
+            l2cap_chan_le_connection_update_req(chan, &param_req);
+            
+            break;
 	default:
 		err = -ENOPROTOOPT;
 		break;
